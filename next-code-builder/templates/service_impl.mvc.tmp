use rbatis::{Page, PageRequest};
use std::sync::Arc;
use async_trait::async_trait;
use rudi::Singleton;

use next_web_dev::error::api_error::ApiError;

use crate::service::{{ structSmallName }}_service::{{ structName }}Service;
use crate::model::entity::{{ structSmallName }}::{{ structName }};


//! Author: {{ author }}
//! DateTime: {{ dateTime }}
//! Description: {{ structName }}ServiceImpl

#[derive(Clone)]
#[Singleton(name = "{{ beanName }}ServiceImpl", binds = [Self::into_service])]
pub struct {{ structName }}ServiceImpl {
    #[di(name = "datasourceMaster")]
    rbs: rbatis::Rbatis
}


#[async_trait]
impl {{ structName }}Service for {{ structName }}ServiceImpl {

    type ServiceResult<T> = Result<T, ApiError>;

    async fn select_page(&self, page_request: &PageRequest, company_id: &str) -> Self::ServiceResult<Page<{{ structName }}>> {
        return Ok({{ structName }}.find_with_page(self.rbs, page_request).await);
    }

    async fn select_by_id(&self, id: {{ id }}) -> Self::ServiceResult<Option<{{ structName }}>> {
        return Ok({{ structName }}.find_by_id(self.rbs, id).await);
    }

    async fn insert(&self, data: &{{ structName }}) -> Self::ServiceResult<Option<bool>> {
        return Ok(Some({{ structName }}.save(self.rbs, data).await));
    }

    async fn insert_batch(&self, data: &Vec<{{ structName }}>) -> Self::ServiceResult<Option<bool>> {
        return Ok(Some({{ structName }}.save_batch(self.rbs, data).await));
    }

    async fn update_by_id(&self, data: &{{ structName }}) -> Self::ServiceResult<Option<bool>> {
        return Ok(Some({{ structName }}.update(self.rbs, data).await));
    }

    async fn delete_by_id(&self, id: {{ id }}) -> Self::ServiceResult<Option<bool>> {
        return Ok(Some({{ structName }}.delete(self.rbs, id).await));
    }
}

impl {{ structName }}ServiceImpl {
    
    pub fn into_service(self) -> Arc<dyn {{ structName }}Service> {
        Arc::new(self)
    }
}